import numpy as np
import cv2
import trimesh

def generate_score_texture_splatting(UV_points, scores, tex_width, tex_height):
    """
    Generates a score texture using splatting based on UV_points and scores (both normalized to [0,1])
    Parameters:
      UV_points: (N, 2) array, representing the UV coordinates of points in the texture, range should be [0,1]
      scores: (N,) array, score values range [0,1]
      tex_width, tex_height: dimensions of the output texture image
    Returns:
      A single-channel uint8 grayscale image, value range 0-255
    """
    # Initialize accumulators to count the accumulated score values and contributing point counts for each pixel
    score_accum = np.zeros((tex_height, tex_width), dtype=np.float32)
    count_accum = np.zeros((tex_height, tex_width), dtype=np.float32)
    
    # Note: Forward code calculates pixel coordinates using
    #    x_tex = rint(u * (tex_width - 1))
    #    y_tex = rint((1 - v) * (tex_height - 1))
    # Therefore, similar processing is needed for the v component of UV here
    x_pixels = np.rint(UV_points[:, 0] * (tex_width - 1)).astype(np.int32)
    y_pixels = np.rint((1 - UV_points[:, 1]) * (tex_height - 1)).astype(np.int32)
    
    # Accumulate the score values of each point at the corresponding pixel, and count the points
    for x, y, s in zip(x_pixels, y_pixels, scores):
        # Clip protection is done to handle potential UV mapping boundary issues
        x = np.clip(x, 0, tex_width - 1)
        y = np.clip(y, 0, tex_height - 1)
        score_accum[y, x] += s
        count_accum[y, x] += 1.0

    # Calculate the average score for pixels with contributions; pixels without data are temporarily set to 0
    texture = np.zeros_like(score_accum, dtype=np.float32)
    nonzero_mask = count_accum > 0
    texture[nonzero_mask] = score_accum[nonzero_mask] / count_accum[nonzero_mask]
    
    # Map to 0-255 and convert to uint8
    texture_uint8 = (texture * 255).astype(np.uint8)
    
    # Construct a mask using inpaint to fill in areas without data (count==0)
    mask = (count_accum == 0).astype(np.uint8) * 255
    texture_inpaint = cv2.inpaint(texture_uint8, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)
    
    # Optionally: Use Gaussian blur to further smooth the result
    texture_smooth = cv2.GaussianBlur(texture_inpaint, (3, 3), 0)
    
    return texture_smooth

# Assuming the following are already available:
# - mesh: mesh loaded with trimesh, containing UV information
# - point_cloud: (N,3) point cloud, already sampled from the mesh or can be found on the corresponding face through projection
# - scores: (N,) scores (e.g., using the normalized result of one color channel)
# - tex_width, tex_height are the dimensions of the original texture image

# ----------------------------------------
# Calculate UV coordinates (ensuring consistency with forward extraction)
# ----------------------------------------
# This example uses trimesh.proximity.closest_point to get the closest point on the mesh for each point, along with the corresponding face index
closest_points, distances, face_indices = trimesh.proximity.closest_point(mesh, point_cloud)

if not (hasattr(mesh.visual, 'uv') and mesh.visual.uv is not None):
    raise ValueError("Mesh lacks UV information!")
vertex_uv = mesh.visual.uv

def compute_barycentrics(P, A, B, C):
    v0 = B - A
    v1 = C - A
    v2 = P - A
    d00 = np.dot(v0, v0)
    d01 = np.dot(v0, v1)
    d11 = np.dot(v1, v1)
    d20 = np.dot(v2, v0)
    d21 = np.dot(v2, v1)
    denom = d00 * d11 - d01 * d01
    if np.abs(denom) < 1e-8:
        return 1.0, 0.0, 0.0
    v = (d11 * d20 - d01 * d21) / denom
    w = (d00 * d21 - d01 * d20) / denom
    u = 1.0 - v - w
    return u, v, w

UV_points = []
for proj_pt, face_idx in zip(closest_points, face_indices):
    face = mesh.faces[face_idx]
    A = mesh.vertices[face[0]]
    B = mesh.vertices[face[1]]
    C = mesh.vertices[face[2]]
    u_val, v_val, w_val = compute_barycentrics(proj_pt, A, B, C)
    uvA = vertex_uv[face[0]]
    uvB = vertex_uv[face[1]]
    uvC = vertex_uv[face[2]]
    uv = u_val * uvA + v_val * uvB + w_val * uvC
    UV_points.append(uv)
UV_points = np.array(UV_points)

# Generate texture using the splatting method
texture_from_score = generate_score_texture_splatting(UV_points, scores, tex_width, tex_height)

# Save the result
cv2.imwrite("score_texture_splatting.png", texture_from_score)
print("The generated score texture has been saved as score_texture_splatting.png")
